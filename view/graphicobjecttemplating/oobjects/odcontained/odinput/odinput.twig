{# template de l'objet ODInput #}

{# traitement de la génération des classes pour event #}
{% set objClasses = 'gotObject hidden ' ~ objet.id ~ " " ~ objet.classes %}
{% if objet.form is not empty %}
    {% set objClasses = objClasses ~ 'form-group row ' %}
{% endif %}

{% set events = objet.event %}
{% for evt, event in events %}
    {% if evt == 'change' %} {% set objClasses = objClasses ~ ' inputChg' %}
    {% elseif evt == 'keyup' %} {% set objClasses = objClasses ~ ' inputKup' %}
    {% endif %}
{% endfor %}

<div id="{{ objet.id }}" class="{{ objClasses }}" data-objet="{{ objet.object }}" data-display="{{ objet.display }}"
     data-widthbt="{{ objet.widthBT }}" {% if objet.form is not empty %} data-form="{{ objet.form }}" {% endif %}
        {% include "graphicobjecttemplating/oobjects/eventsHTML.twig" with {'events':objet.event} %}
        {% if objet.mask is not empty %} data-mask="{{ objet.mask }}" {% endif %}
     data-default="
     {% if objet.default == false) %}false{% elseif objet.default == true %}true{% else %}{{ objet.default }}{% endif %}
     "
{{ objet.default ?: 'none' }}
>
    <style>
        {% if objet.type == constant('GraphicObjectTemplating\\OObjects\\ODContained\\ODInput::INPUTTYPE_PASSWORD')
                and objet.reveal_pwd %}
        span.field-icon {
            position: absolute;
            display: inline-block;
            cursor: pointer;
            right: 1.5rem;
            top: 0.6rem;
            color: black;
            z-index: 2;
        }
        {% endif %}
    </style>
    <label for="{{ objet.id }}Input"
            {% if objet.labelWidthBT is not empty %} data-widthbt="{{ objet.labelWidthBT }}" {% endif %}
    > {{ objet.label }} </label>
    <input id="{{ objet.id }}Input" name="{{ objet.name }}" type="{{ objet.type }}"
            {% if objet.value is not empty %} value="{{ objet.value }}" {% endif %}
            {% if objet.size is not empty %} size="{{ objet.size }}" {% endif %}
            {% if objet.minlength is not empty %} minlength="{{ objet.minlength }}" {% endif %}
            {% if objet.maxlength is not empty %} maxlength="{{ objet.maxlength }}" {% endif %}
            {% if objet.inputWidthBT is not empty %} data-widthbt="{{ objet.inputWidthBT }}" {% endif %}
            {% if objet.autoFocus %} autofocus="autofocus" {% endif %}
            {% if objet.state == false %} disabled {% endif %}
            class="form-control-got"
            {% if objet.type == 'number' %}
                {% if objet.valMin is defined and objet.valMin is not empty %} data-valMin="{{ objet.valMin }}" {% endif %}
                {% if objet.valMax is defined and objet.valMax is not empty %} data-valMax="{{ objet.valMax }}" {% endif %}
            {% endif %}
            {% if objet.mask is not empty %}data-mask="{{ objet.mask }}"{% endif %}
            {% if objet.placeholder is not empty %}placeholder="{{ objet.placeholder }}"{% endif %}
    >
    {% if objet.type == constant('GraphicObjectTemplating\\OObjects\\ODContained\\ODInput::INPUTTYPE_PASSWORD') and objet.reveal_pwd %}
        <span class="fa fa-fw fa-eye field-icon reveal"></span>
    {% endif %}
    <span class="help-block hidden"></span>
    <span class="error hidden"></span>

    <script>
        $(document).ready(function (evt) {
            {% if objet.labelWidthBT is not empty %}
            setBtClasses("#{{ objet.id }} label", $("#{{ objet.id }} label").data("widthbt"));
            {% endif %}
            {% if objet.inputWidthBT is not empty %}
            setBtClasses("#{{ objet.id }} input", $("#{{ objet.id }} input").data("widthbt"));
            {% endif %}

            {% if objet.reveal_pwd %}
            $(".reveal").on('click', function () {
                $(this).toggleClass('fa-eye fa-eye-slash');
                let input = $(this).parent().find('input');
                if (input.attr('type') === 'password') {
                    input.attr('type', 'text');
                } else {
                    input.attr('type', 'password');
                }
            });
            {% endif %}

            {% if objet.mask is not empty %} $("#{{ objet.id }} input").mask("{{ objet.mask }}"); {% endif %}

            {% if objet.autoFocus %}
            {% include "graphicobjecttemplating/oobjects/autoFocus.js.twig" with {id : (objet.id ~ 'Input')} %}
            {% endif %}

            {% if objet.event is not empty %}
            {% include "graphicobjecttemplating/oobjects/eventsJS.twig" with { events:objet.event } %}
            {% endif %}

{#            {% if objet.infoBulle is not empty %}#}
{#            {% include "graphicobjecttemplating/oobjects/infoBulle.js.twig" with { infoBulle:objet.infoBulle, id:objet.id } %}#}
{#            {% endif %}#}
        });
    </script>

    {% include "graphicobjecttemplating/oobjects/infoBulle.js.twig" with {'infoBulle':objet.infoBulle, 'id':objet.id} %}
</div>